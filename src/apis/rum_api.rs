/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::models::*;

/// struct for passing parameters to the method [`aggregate_rum_events`]
#[derive(Clone, Debug, Default)]
pub struct AggregateRumEventsParams {
    pub body: crate::models::RumAggregateRequest,
}

/// struct for passing parameters to the method [`create_rum_application`]
#[derive(Clone, Debug, Default)]
pub struct CreateRumApplicationParams {
    pub body: crate::models::RumApplicationCreateRequest,
}

/// struct for passing parameters to the method [`delete_rum_application`]
#[derive(Clone, Debug, Default)]
pub struct DeleteRumApplicationParams {
    /// RUM application ID.
    pub id: String,
}

/// struct for passing parameters to the method [`get_rum_application`]
#[derive(Clone, Debug, Default)]
pub struct GetRumApplicationParams {
    /// RUM application ID.
    pub id: String,
}

/// struct for passing parameters to the method [`list_rum_events`]
#[derive(Clone, Debug, Default)]
pub struct ListRumEventsParams {
    /// Search query following RUM syntax.
    pub filter_query: Option<String>,
    /// Minimum timestamp for requested events.
    pub filter_from: Option<String>,
    /// Maximum timestamp for requested events.
    pub filter_to: Option<String>,
    /// Order of events in results.
    pub sort: Option<RumSort>,
    /// List following results with a cursor provided in the previous query.
    pub page_cursor: Option<String>,
    /// Maximum number of events in the response.
    pub page_limit: Option<i32>,
}

/// struct for passing parameters to the method [`search_rum_events`]
#[derive(Clone, Debug, Default)]
pub struct SearchRumEventsParams {
    pub body: crate::models::RumSearchEventsRequest,
}

/// struct for passing parameters to the method [`update_rum_application`]
#[derive(Clone, Debug, Default)]
pub struct UpdateRumApplicationParams {
    /// RUM application ID.
    pub id: String,
    pub body: crate::models::RumApplicationUpdateRequest,
}

/// struct for typed errors of method [`aggregate_rum_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AggregateRumEventsError {
    Status400(crate::models::ApiErrorResponse),
    Status403(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_rum_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRumApplicationError {
    Status400(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_rum_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRumApplicationError {
    Status404(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rum_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRumApplicationError {
    Status404(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rum_applications`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRumApplicationsError {
    Status404(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_rum_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListRumEventsError {
    Status400(crate::models::ApiErrorResponse),
    Status403(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_rum_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchRumEventsError {
    Status400(crate::models::ApiErrorResponse),
    Status403(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_rum_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateRumApplicationError {
    Status400(crate::models::ApiErrorResponse),
    Status404(crate::models::ApiErrorResponse),
    Status422(crate::models::ApiErrorResponse),
    Status429(crate::models::ApiErrorResponse),
    UnknownValue(serde_json::Value),
}

/// The API endpoint to aggregate RUM events into buckets of computed metrics and timeseries.
pub async fn aggregate_rum_events(
    configuration: &configuration::Configuration,
    params: AggregateRumEventsParams,
) -> Result<crate::models::RumAnalyticsAggregateResponse, Error<AggregateRumEventsError>> {
    let configuration = configuration;

    // unbox the parameters
    let body = params.body;

    let client = &configuration.client;

    let uri_str = format!("{}/api/v2/rum/analytics/aggregate", configuration.base_path);
    let mut request = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    request = request.json(&body);

    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<AggregateRumEventsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// Create a new RUM application in your organization.
pub async fn create_rum_application(
    configuration: &configuration::Configuration,
    params: CreateRumApplicationParams,
) -> Result<crate::models::RumApplicationResponse, Error<CreateRumApplicationError>> {
    let configuration = configuration;

    // unbox the parameters
    let body = params.body;

    let client = &configuration.client;

    let uri_str = format!("{}/api/v2/rum/applications", configuration.base_path);
    let mut request = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    request = request.json(&body);

    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateRumApplicationError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// Delete an existing RUM application in your organization.
pub async fn delete_rum_application(
    configuration: &configuration::Configuration,
    params: DeleteRumApplicationParams,
) -> Result<(), Error<DeleteRumApplicationError>> {
    let configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let client = &configuration.client;

    let uri_str = format!(
        "{}/api/v2/rum/applications/{id}",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut request = client.request(reqwest::Method::DELETE, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let entity: Option<DeleteRumApplicationError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// Get the RUM application with given ID in your organization.
pub async fn get_rum_application(
    configuration: &configuration::Configuration,
    params: GetRumApplicationParams,
) -> Result<crate::models::RumApplicationResponse, Error<GetRumApplicationError>> {
    let configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let client = &configuration.client;

    let uri_str = format!(
        "{}/api/v2/rum/applications/{id}",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut request = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetRumApplicationError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status,
            content,
            entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// List all the RUM applications in your organization.
pub async fn get_rum_applications(
    configuration: &configuration::Configuration,
) -> Result<crate::models::RumApplicationsResponse, Error<GetRumApplicationsError>> {
    let configuration = configuration;

    // unbox the parameters

    let client = &configuration.client;

    let uri_str = format!("{}/api/v2/rum/applications", configuration.base_path);
    let mut request = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetRumApplicationsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// List endpoint returns events that match a RUM search query. [Results are paginated][1].  Use this endpoint to see your latest RUM events.  [1]: https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
pub async fn list_rum_events(
    configuration: &configuration::Configuration,
    params: ListRumEventsParams,
) -> Result<crate::models::RumEventsResponse, Error<ListRumEventsError>> {
    let configuration = configuration;

    // unbox the parameters
    let filter_query = params.filter_query;
    let filter_from = params.filter_from;
    let filter_to = params.filter_to;
    let sort = params.sort;
    let page_cursor = params.page_cursor;
    let page_limit = params.page_limit;

    let client = &configuration.client;

    let uri_str = format!("{}/api/v2/rum/events", configuration.base_path);
    let mut request = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref str) = filter_query {
        request = request.query(&[("filter[query]", &str.to_string())]);
    }
    if let Some(ref str) = filter_from {
        request = request.query(&[("filter[from]", &str.to_string())]);
    }
    if let Some(ref str) = filter_to {
        request = request.query(&[("filter[to]", &str.to_string())]);
    }
    if let Some(ref str) = sort {
        request = request.query(&[("sort", &str.to_string())]);
    }
    if let Some(ref str) = page_cursor {
        request = request.query(&[("page[cursor]", &str.to_string())]);
    }
    if let Some(ref str) = page_limit {
        request = request.query(&[("page[limit]", &str.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<ListRumEventsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// List endpoint returns RUM events that match a RUM search query. [Results are paginated][1].  Use this endpoint to build complex RUM events filtering and search.  [1]: https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination
pub async fn search_rum_events(
    configuration: &configuration::Configuration,
    params: SearchRumEventsParams,
) -> Result<crate::models::RumEventsResponse, Error<SearchRumEventsError>> {
    let configuration = configuration;

    // unbox the parameters
    let body = params.body;

    let client = &configuration.client;

    let uri_str = format!("{}/api/v2/rum/events/search", configuration.base_path);
    let mut request = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    request = request.json(&body);

    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<SearchRumEventsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}

/// Update the RUM application with given ID in your organization.
pub async fn update_rum_application(
    configuration: &configuration::Configuration,
    params: UpdateRumApplicationParams,
) -> Result<crate::models::RumApplicationResponse, Error<UpdateRumApplicationError>> {
    let configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let body = params.body;

    let client = &configuration.client;

    let uri_str = format!(
        "{}/api/v2/rum/applications/{id}",
        configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut request = client.request(reqwest::Method::PATCH, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        request = request.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        request = request.header("DD-API-KEY", apikey);
    };
    if let Some(ref appkey) = configuration.app_key {
        request = request.header("DD-APPLICATION-KEY", appkey);
    };
    request = request.json(&body);

    let req = request.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<UpdateRumApplicationError> = serde_json::from_str(&content).ok();
        let error = ResponseContent {
            status: status,
            content: content,
            entity: entity,
        };
        Err(Error::ResponseError(error))
    }
}
