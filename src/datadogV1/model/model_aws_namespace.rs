// Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2019-Present Datadog, Inc.

use serde::{Deserialize, Deserializer, Serialize, Serializer};

#[non_exhaustive]
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum AWSNamespace {
    API_GATEWAY,
    APPLICATION_ELB,
    APPRUNNER,
    APPSTREAM,
    APPSYNC,
    ATHENA,
    AUTO_SCALING,
    BACKUP,
    BEDROCK,
    BILLING,
    BUDGETING,
    CERTIFICATEMANAGER,
    CLOUDFRONT,
    CLOUDHSM,
    CLOUDSEARCH,
    CLOUDWATCH_EVENTS,
    CLOUDWATCH_LOGS,
    CODEBUILD,
    CODEWHISPERER,
    COGNITO,
    COLLECT_CUSTOM_METRICS,
    CONFIG,
    CONNECT,
    CRAWL_ALARMS,
    CUSTOM,
    DIRECTCONNECT,
    DMS,
    DOCUMENTDB,
    DYNAMODB,
    DYNAMODBACCELERATOR,
    EBS,
    EC2,
    EC2API,
    EC2SPOT,
    ECR,
    ECS,
    EFS,
    ELASTICACHE,
    ELASTICBEANSTALK,
    ELASTICINFERENCE,
    ELASTICTRANSCODER,
    ELB,
    EMR,
    ES,
    FIREHOSE,
    FSX,
    GAMELIFT,
    GLOBALACCELERATOR,
    GLUE,
    INSPECTOR,
    IOT,
    KEYSPACES,
    KINESIS,
    KINESIS_ANALYTICS,
    KMS,
    LAMBDA,
    LEX,
    MEDIACONNECT,
    MEDIACONVERT,
    MEDIALIVE,
    MEDIAPACKAGE,
    MEDIASTORE,
    MEDIATAILOR,
    MEMORYDB,
    ML,
    MQ,
    MSK,
    MWAA,
    NAT_GATEWAY,
    NEPTUNE,
    NETWORK_ELB,
    NETWORKFIREWALL,
    NETWORKMONITOR,
    OPENSEARCHSERVERLESS,
    OPSWORKS,
    POLLY,
    PRIVATELINKENDPOINTS,
    PRIVATELINKSERVICES,
    RDS,
    RDSPROXY,
    REDSHIFT,
    REKOGNITION,
    ROUTE53,
    ROUTE53RESOLVER,
    S3,
    S3STORAGELENS,
    SAGEMAKER,
    SAGEMAKERENDPOINTS,
    SAGEMAKERLABELINGJOBS,
    SAGEMAKERMODELBUILDINGPIPELINE,
    SAGEMAKERPROCESSINGJOBS,
    SAGEMAKERTRAININGJOBS,
    SAGEMAKERTRANSFORMJOBS,
    SAGEMAKERWORKTEAM,
    SERVICE_QUOTAS,
    SES,
    SHIELD,
    SNS,
    SQS,
    STEP_FUNCTIONS,
    STORAGE_GATEWAY,
    SWF,
    TEXTRACT,
    TRANSITGATEWAY,
    TRANSLATE,
    TRUSTED_ADVISOR,
    USAGE,
    VPN,
    WAF,
    WAFV2,
    WORKSPACES,
    XRAY,
    UnparsedObject(crate::datadog::UnparsedObject),
}

impl ToString for AWSNamespace {
    fn to_string(&self) -> String {
        match self {
            Self::API_GATEWAY => String::from("api_gateway"),
            Self::APPLICATION_ELB => String::from("application_elb"),
            Self::APPRUNNER => String::from("apprunner"),
            Self::APPSTREAM => String::from("appstream"),
            Self::APPSYNC => String::from("appsync"),
            Self::ATHENA => String::from("athena"),
            Self::AUTO_SCALING => String::from("auto_scaling"),
            Self::BACKUP => String::from("backup"),
            Self::BEDROCK => String::from("bedrock"),
            Self::BILLING => String::from("billing"),
            Self::BUDGETING => String::from("budgeting"),
            Self::CERTIFICATEMANAGER => String::from("certificatemanager"),
            Self::CLOUDFRONT => String::from("cloudfront"),
            Self::CLOUDHSM => String::from("cloudhsm"),
            Self::CLOUDSEARCH => String::from("cloudsearch"),
            Self::CLOUDWATCH_EVENTS => String::from("cloudwatch_events"),
            Self::CLOUDWATCH_LOGS => String::from("cloudwatch_logs"),
            Self::CODEBUILD => String::from("codebuild"),
            Self::CODEWHISPERER => String::from("codewhisperer"),
            Self::COGNITO => String::from("cognito"),
            Self::COLLECT_CUSTOM_METRICS => String::from("collect_custom_metrics"),
            Self::CONFIG => String::from("config"),
            Self::CONNECT => String::from("connect"),
            Self::CRAWL_ALARMS => String::from("crawl_alarms"),
            Self::CUSTOM => String::from("custom"),
            Self::DIRECTCONNECT => String::from("directconnect"),
            Self::DMS => String::from("dms"),
            Self::DOCUMENTDB => String::from("documentdb"),
            Self::DYNAMODB => String::from("dynamodb"),
            Self::DYNAMODBACCELERATOR => String::from("dynamodbaccelerator"),
            Self::EBS => String::from("ebs"),
            Self::EC2 => String::from("ec2"),
            Self::EC2API => String::from("ec2api"),
            Self::EC2SPOT => String::from("ec2spot"),
            Self::ECR => String::from("ecr"),
            Self::ECS => String::from("ecs"),
            Self::EFS => String::from("efs"),
            Self::ELASTICACHE => String::from("elasticache"),
            Self::ELASTICBEANSTALK => String::from("elasticbeanstalk"),
            Self::ELASTICINFERENCE => String::from("elasticinference"),
            Self::ELASTICTRANSCODER => String::from("elastictranscoder"),
            Self::ELB => String::from("elb"),
            Self::EMR => String::from("emr"),
            Self::ES => String::from("es"),
            Self::FIREHOSE => String::from("firehose"),
            Self::FSX => String::from("fsx"),
            Self::GAMELIFT => String::from("gamelift"),
            Self::GLOBALACCELERATOR => String::from("globalaccelerator"),
            Self::GLUE => String::from("glue"),
            Self::INSPECTOR => String::from("inspector"),
            Self::IOT => String::from("iot"),
            Self::KEYSPACES => String::from("keyspaces"),
            Self::KINESIS => String::from("kinesis"),
            Self::KINESIS_ANALYTICS => String::from("kinesis_analytics"),
            Self::KMS => String::from("kms"),
            Self::LAMBDA => String::from("lambda"),
            Self::LEX => String::from("lex"),
            Self::MEDIACONNECT => String::from("mediaconnect"),
            Self::MEDIACONVERT => String::from("mediaconvert"),
            Self::MEDIALIVE => String::from("medialive"),
            Self::MEDIAPACKAGE => String::from("mediapackage"),
            Self::MEDIASTORE => String::from("mediastore"),
            Self::MEDIATAILOR => String::from("mediatailor"),
            Self::MEMORYDB => String::from("memorydb"),
            Self::ML => String::from("ml"),
            Self::MQ => String::from("mq"),
            Self::MSK => String::from("msk"),
            Self::MWAA => String::from("mwaa"),
            Self::NAT_GATEWAY => String::from("nat_gateway"),
            Self::NEPTUNE => String::from("neptune"),
            Self::NETWORK_ELB => String::from("network_elb"),
            Self::NETWORKFIREWALL => String::from("networkfirewall"),
            Self::NETWORKMONITOR => String::from("networkmonitor"),
            Self::OPENSEARCHSERVERLESS => String::from("opensearchserverless"),
            Self::OPSWORKS => String::from("opsworks"),
            Self::POLLY => String::from("polly"),
            Self::PRIVATELINKENDPOINTS => String::from("privatelinkendpoints"),
            Self::PRIVATELINKSERVICES => String::from("privatelinkservices"),
            Self::RDS => String::from("rds"),
            Self::RDSPROXY => String::from("rdsproxy"),
            Self::REDSHIFT => String::from("redshift"),
            Self::REKOGNITION => String::from("rekognition"),
            Self::ROUTE53 => String::from("route53"),
            Self::ROUTE53RESOLVER => String::from("route53resolver"),
            Self::S3 => String::from("s3"),
            Self::S3STORAGELENS => String::from("s3storagelens"),
            Self::SAGEMAKER => String::from("sagemaker"),
            Self::SAGEMAKERENDPOINTS => String::from("sagemakerendpoints"),
            Self::SAGEMAKERLABELINGJOBS => String::from("sagemakerlabelingjobs"),
            Self::SAGEMAKERMODELBUILDINGPIPELINE => String::from("sagemakermodelbuildingpipeline"),
            Self::SAGEMAKERPROCESSINGJOBS => String::from("sagemakerprocessingjobs"),
            Self::SAGEMAKERTRAININGJOBS => String::from("sagemakertrainingjobs"),
            Self::SAGEMAKERTRANSFORMJOBS => String::from("sagemakertransformjobs"),
            Self::SAGEMAKERWORKTEAM => String::from("sagemakerworkteam"),
            Self::SERVICE_QUOTAS => String::from("service_quotas"),
            Self::SES => String::from("ses"),
            Self::SHIELD => String::from("shield"),
            Self::SNS => String::from("sns"),
            Self::SQS => String::from("sqs"),
            Self::STEP_FUNCTIONS => String::from("step_functions"),
            Self::STORAGE_GATEWAY => String::from("storage_gateway"),
            Self::SWF => String::from("swf"),
            Self::TEXTRACT => String::from("textract"),
            Self::TRANSITGATEWAY => String::from("transitgateway"),
            Self::TRANSLATE => String::from("translate"),
            Self::TRUSTED_ADVISOR => String::from("trusted_advisor"),
            Self::USAGE => String::from("usage"),
            Self::VPN => String::from("vpn"),
            Self::WAF => String::from("waf"),
            Self::WAFV2 => String::from("wafv2"),
            Self::WORKSPACES => String::from("workspaces"),
            Self::XRAY => String::from("xray"),
            Self::UnparsedObject(v) => v.value.to_string(),
        }
    }
}

impl Serialize for AWSNamespace {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match self {
            Self::UnparsedObject(v) => v.serialize(serializer),
            _ => serializer.serialize_str(self.to_string().as_str()),
        }
    }
}

impl<'de> Deserialize<'de> for AWSNamespace {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s: String = String::deserialize(deserializer)?;
        Ok(match s.as_str() {
            "api_gateway" => Self::API_GATEWAY,
            "application_elb" => Self::APPLICATION_ELB,
            "apprunner" => Self::APPRUNNER,
            "appstream" => Self::APPSTREAM,
            "appsync" => Self::APPSYNC,
            "athena" => Self::ATHENA,
            "auto_scaling" => Self::AUTO_SCALING,
            "backup" => Self::BACKUP,
            "bedrock" => Self::BEDROCK,
            "billing" => Self::BILLING,
            "budgeting" => Self::BUDGETING,
            "certificatemanager" => Self::CERTIFICATEMANAGER,
            "cloudfront" => Self::CLOUDFRONT,
            "cloudhsm" => Self::CLOUDHSM,
            "cloudsearch" => Self::CLOUDSEARCH,
            "cloudwatch_events" => Self::CLOUDWATCH_EVENTS,
            "cloudwatch_logs" => Self::CLOUDWATCH_LOGS,
            "codebuild" => Self::CODEBUILD,
            "codewhisperer" => Self::CODEWHISPERER,
            "cognito" => Self::COGNITO,
            "collect_custom_metrics" => Self::COLLECT_CUSTOM_METRICS,
            "config" => Self::CONFIG,
            "connect" => Self::CONNECT,
            "crawl_alarms" => Self::CRAWL_ALARMS,
            "custom" => Self::CUSTOM,
            "directconnect" => Self::DIRECTCONNECT,
            "dms" => Self::DMS,
            "documentdb" => Self::DOCUMENTDB,
            "dynamodb" => Self::DYNAMODB,
            "dynamodbaccelerator" => Self::DYNAMODBACCELERATOR,
            "ebs" => Self::EBS,
            "ec2" => Self::EC2,
            "ec2api" => Self::EC2API,
            "ec2spot" => Self::EC2SPOT,
            "ecr" => Self::ECR,
            "ecs" => Self::ECS,
            "efs" => Self::EFS,
            "elasticache" => Self::ELASTICACHE,
            "elasticbeanstalk" => Self::ELASTICBEANSTALK,
            "elasticinference" => Self::ELASTICINFERENCE,
            "elastictranscoder" => Self::ELASTICTRANSCODER,
            "elb" => Self::ELB,
            "emr" => Self::EMR,
            "es" => Self::ES,
            "firehose" => Self::FIREHOSE,
            "fsx" => Self::FSX,
            "gamelift" => Self::GAMELIFT,
            "globalaccelerator" => Self::GLOBALACCELERATOR,
            "glue" => Self::GLUE,
            "inspector" => Self::INSPECTOR,
            "iot" => Self::IOT,
            "keyspaces" => Self::KEYSPACES,
            "kinesis" => Self::KINESIS,
            "kinesis_analytics" => Self::KINESIS_ANALYTICS,
            "kms" => Self::KMS,
            "lambda" => Self::LAMBDA,
            "lex" => Self::LEX,
            "mediaconnect" => Self::MEDIACONNECT,
            "mediaconvert" => Self::MEDIACONVERT,
            "medialive" => Self::MEDIALIVE,
            "mediapackage" => Self::MEDIAPACKAGE,
            "mediastore" => Self::MEDIASTORE,
            "mediatailor" => Self::MEDIATAILOR,
            "memorydb" => Self::MEMORYDB,
            "ml" => Self::ML,
            "mq" => Self::MQ,
            "msk" => Self::MSK,
            "mwaa" => Self::MWAA,
            "nat_gateway" => Self::NAT_GATEWAY,
            "neptune" => Self::NEPTUNE,
            "network_elb" => Self::NETWORK_ELB,
            "networkfirewall" => Self::NETWORKFIREWALL,
            "networkmonitor" => Self::NETWORKMONITOR,
            "opensearchserverless" => Self::OPENSEARCHSERVERLESS,
            "opsworks" => Self::OPSWORKS,
            "polly" => Self::POLLY,
            "privatelinkendpoints" => Self::PRIVATELINKENDPOINTS,
            "privatelinkservices" => Self::PRIVATELINKSERVICES,
            "rds" => Self::RDS,
            "rdsproxy" => Self::RDSPROXY,
            "redshift" => Self::REDSHIFT,
            "rekognition" => Self::REKOGNITION,
            "route53" => Self::ROUTE53,
            "route53resolver" => Self::ROUTE53RESOLVER,
            "s3" => Self::S3,
            "s3storagelens" => Self::S3STORAGELENS,
            "sagemaker" => Self::SAGEMAKER,
            "sagemakerendpoints" => Self::SAGEMAKERENDPOINTS,
            "sagemakerlabelingjobs" => Self::SAGEMAKERLABELINGJOBS,
            "sagemakermodelbuildingpipeline" => Self::SAGEMAKERMODELBUILDINGPIPELINE,
            "sagemakerprocessingjobs" => Self::SAGEMAKERPROCESSINGJOBS,
            "sagemakertrainingjobs" => Self::SAGEMAKERTRAININGJOBS,
            "sagemakertransformjobs" => Self::SAGEMAKERTRANSFORMJOBS,
            "sagemakerworkteam" => Self::SAGEMAKERWORKTEAM,
            "service_quotas" => Self::SERVICE_QUOTAS,
            "ses" => Self::SES,
            "shield" => Self::SHIELD,
            "sns" => Self::SNS,
            "sqs" => Self::SQS,
            "step_functions" => Self::STEP_FUNCTIONS,
            "storage_gateway" => Self::STORAGE_GATEWAY,
            "swf" => Self::SWF,
            "textract" => Self::TEXTRACT,
            "transitgateway" => Self::TRANSITGATEWAY,
            "translate" => Self::TRANSLATE,
            "trusted_advisor" => Self::TRUSTED_ADVISOR,
            "usage" => Self::USAGE,
            "vpn" => Self::VPN,
            "waf" => Self::WAF,
            "wafv2" => Self::WAFV2,
            "workspaces" => Self::WORKSPACES,
            "xray" => Self::XRAY,
            _ => Self::UnparsedObject(crate::datadog::UnparsedObject {
                value: serde_json::Value::String(s.into()),
            }),
        })
    }
}
