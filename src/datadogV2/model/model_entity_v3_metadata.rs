// Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2019-Present Datadog, Inc.
use serde::de::{Error, MapAccess, Visitor};
use serde::{Deserialize, Deserializer, Serialize};
use serde_with::skip_serializing_none;
use std::fmt::{self, Formatter};

/// The definition of Entity V3 Metadata object.
#[non_exhaustive]
#[skip_serializing_none]
#[derive(Clone, Debug, PartialEq, Serialize)]
pub struct EntityV3Metadata {
    /// The additional owners of the entity, usually a team.
    #[serde(rename = "additionalOwners")]
    pub additional_owners:
        Option<Vec<crate::datadogV2::model::EntityV3MetadataAdditionalOwnersItems>>,
    /// A list of contacts for the entity.
    #[serde(rename = "contacts")]
    pub contacts: Option<Vec<crate::datadogV2::model::EntityV3MetadataContactsItems>>,
    /// Short description of the entity. The UI can leverage the description for display.
    #[serde(rename = "description")]
    pub description: Option<String>,
    /// User friendly name of the entity. The UI can leverage the display name for display.
    #[serde(rename = "displayName")]
    pub display_name: Option<String>,
    /// A read-only globally unique identifier for the entity generated by Datadog.  User supplied values are ignored.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// The entity reference from which to inherit metadata
    #[serde(rename = "inheritFrom")]
    pub inherit_from: Option<String>,
    /// A list of links for the entity.
    #[serde(rename = "links")]
    pub links: Option<Vec<crate::datadogV2::model::EntityV3MetadataLinksItems>>,
    /// A read-only set of Datadog managed attributes generated by Datadog.  User supplied values are ignored.
    #[serde(rename = "managed")]
    pub managed: Option<std::collections::BTreeMap<String, serde_json::Value>>,
    /// Unique name given to an entity under the kind/namespace.
    #[serde(rename = "name")]
    pub name: String,
    /// Namespace is a part of unique identifier. It has a default value of 'default'.
    #[serde(rename = "namespace")]
    pub namespace: Option<String>,
    /// The owner of the entity, usually a team.
    #[serde(rename = "owner")]
    pub owner: Option<crate::datadogV2::model::EntityV3MetadataOwner>,
    /// A set of custom tags.
    #[serde(rename = "tags")]
    pub tags: Option<Vec<String>>,
    #[serde(skip)]
    #[serde(default)]
    pub(crate) _unparsed: bool,
}

impl EntityV3Metadata {
    pub fn new(name: String) -> EntityV3Metadata {
        EntityV3Metadata {
            additional_owners: None,
            contacts: None,
            description: None,
            display_name: None,
            id: None,
            inherit_from: None,
            links: None,
            managed: None,
            name,
            namespace: None,
            owner: None,
            tags: None,
            _unparsed: false,
        }
    }

    pub fn additional_owners(
        mut self,
        value: Vec<crate::datadogV2::model::EntityV3MetadataAdditionalOwnersItems>,
    ) -> Self {
        self.additional_owners = Some(value);
        self
    }

    pub fn contacts(
        mut self,
        value: Vec<crate::datadogV2::model::EntityV3MetadataContactsItems>,
    ) -> Self {
        self.contacts = Some(value);
        self
    }

    pub fn description(mut self, value: String) -> Self {
        self.description = Some(value);
        self
    }

    pub fn display_name(mut self, value: String) -> Self {
        self.display_name = Some(value);
        self
    }

    pub fn id(mut self, value: String) -> Self {
        self.id = Some(value);
        self
    }

    pub fn inherit_from(mut self, value: String) -> Self {
        self.inherit_from = Some(value);
        self
    }

    pub fn links(
        mut self,
        value: Vec<crate::datadogV2::model::EntityV3MetadataLinksItems>,
    ) -> Self {
        self.links = Some(value);
        self
    }

    pub fn managed(mut self, value: std::collections::BTreeMap<String, serde_json::Value>) -> Self {
        self.managed = Some(value);
        self
    }

    pub fn namespace(mut self, value: String) -> Self {
        self.namespace = Some(value);
        self
    }

    pub fn owner(mut self, value: crate::datadogV2::model::EntityV3MetadataOwner) -> Self {
        self.owner = Some(value);
        self
    }

    pub fn tags(mut self, value: Vec<String>) -> Self {
        self.tags = Some(value);
        self
    }
}

impl<'de> Deserialize<'de> for EntityV3Metadata {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        struct EntityV3MetadataVisitor;
        impl<'a> Visitor<'a> for EntityV3MetadataVisitor {
            type Value = EntityV3Metadata;

            fn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {
                f.write_str("a mapping")
            }

            fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>
            where
                M: MapAccess<'a>,
            {
                let mut additional_owners: Option<
                    Vec<crate::datadogV2::model::EntityV3MetadataAdditionalOwnersItems>,
                > = None;
                let mut contacts: Option<
                    Vec<crate::datadogV2::model::EntityV3MetadataContactsItems>,
                > = None;
                let mut description: Option<String> = None;
                let mut display_name: Option<String> = None;
                let mut id: Option<String> = None;
                let mut inherit_from: Option<String> = None;
                let mut links: Option<Vec<crate::datadogV2::model::EntityV3MetadataLinksItems>> =
                    None;
                let mut managed: Option<std::collections::BTreeMap<String, serde_json::Value>> =
                    None;
                let mut name: Option<String> = None;
                let mut namespace: Option<String> = None;
                let mut owner: Option<crate::datadogV2::model::EntityV3MetadataOwner> = None;
                let mut tags: Option<Vec<String>> = None;
                let mut _unparsed = false;

                while let Some((k, v)) = map.next_entry::<String, serde_json::Value>()? {
                    match k.as_str() {
                        "additionalOwners" => {
                            if v.is_null() {
                                continue;
                            }
                            additional_owners =
                                Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "contacts" => {
                            if v.is_null() {
                                continue;
                            }
                            contacts = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "description" => {
                            if v.is_null() {
                                continue;
                            }
                            description =
                                Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "displayName" => {
                            if v.is_null() {
                                continue;
                            }
                            display_name =
                                Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "id" => {
                            if v.is_null() {
                                continue;
                            }
                            id = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "inheritFrom" => {
                            if v.is_null() {
                                continue;
                            }
                            inherit_from =
                                Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "links" => {
                            if v.is_null() {
                                continue;
                            }
                            links = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "managed" => {
                            if v.is_null() {
                                continue;
                            }
                            managed = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "name" => {
                            name = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "namespace" => {
                            if v.is_null() {
                                continue;
                            }
                            namespace = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "owner" => {
                            if v.is_null() {
                                continue;
                            }
                            owner = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        "tags" => {
                            if v.is_null() {
                                continue;
                            }
                            tags = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                        }
                        &_ => {
                            return Err(serde::de::Error::custom(
                                "Additional properties not allowed",
                            ));
                        }
                    }
                }
                let name = name.ok_or_else(|| M::Error::missing_field("name"))?;

                let content = EntityV3Metadata {
                    additional_owners,
                    contacts,
                    description,
                    display_name,
                    id,
                    inherit_from,
                    links,
                    managed,
                    name,
                    namespace,
                    owner,
                    tags,
                    _unparsed,
                };

                Ok(content)
            }
        }

        deserializer.deserialize_any(EntityV3MetadataVisitor)
    }
}
