// Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2019-Present Datadog, Inc.
use serde::{Deserialize, Serialize};
use serde_with::skip_serializing_none;

/// Case when signal is generated by a third party rule.
#[skip_serializing_none]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecurityMonitoringThirdPartyRuleCase {
    /// Name of the case.
    #[serde(rename = "name")]
    pub name: Option<String>,
    /// Notification targets for each rule case.
    #[serde(rename = "notifications")]
    pub notifications: Option<Vec<String>>,
    /// A query to map a third party event to this case.
    #[serde(rename = "query")]
    pub query: Option<String>,
    /// Severity of the Security Signal.
    #[serde(rename = "status")]
    pub status: Option<crate::datadogV2::model::SecurityMonitoringRuleSeverity>,
}

impl SecurityMonitoringThirdPartyRuleCase {
    pub fn new() -> SecurityMonitoringThirdPartyRuleCase {
        SecurityMonitoringThirdPartyRuleCase {
            name: None,
            notifications: None,
            query: None,
            status: None,
        }
    }

    pub fn with_name(&mut self, value: String) -> &mut Self {
        self.name = Some(value);
        self
    }

    pub fn with_notifications(&mut self, value: Vec<String>) -> &mut Self {
        self.notifications = Some(value);
        self
    }

    pub fn with_query(&mut self, value: String) -> &mut Self {
        self.query = Some(value);
        self
    }

    pub fn with_status(
        &mut self,
        value: crate::datadogV2::model::SecurityMonitoringRuleSeverity,
    ) -> &mut Self {
        self.status = Some(value);
        self
    }
}
impl Default for SecurityMonitoringThirdPartyRuleCase {
    fn default() -> Self {
        Self::new()
    }
}
