/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// DowntimeScheduleResponse : The schedule that defines when the monitor starts, stops, and recurs. There are two types of schedules: one-time and recurring. Recurring schedules may have up to five RRULE-based recurrences. If no schedules are provided, the downtime will begin immediately and never end.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DowntimeScheduleResponse {
    #[serde(rename = "current_downtime", skip_serializing_if = "Option::is_none")]
    pub current_downtime: Option<Box<crate::models::DowntimeScheduleCurrentDowntimeResponse>>,
    /// A list of downtime recurrences.
    #[serde(rename = "recurrences")]
    pub recurrences: Vec<crate::models::DowntimeScheduleRecurrenceResponse>,
    /// The timezone in which to schedule the downtime. This affects recurring start and end dates. Must match `display_timezone`.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// ISO-8601 Datetime to end the downtime.
    #[serde(rename = "end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end: Option<Option<String>>,
    /// ISO-8601 Datetime to start the downtime.
    #[serde(rename = "start")]
    pub start: String,
}

impl DowntimeScheduleResponse {
    /// The schedule that defines when the monitor starts, stops, and recurs. There are two types of schedules: one-time and recurring. Recurring schedules may have up to five RRULE-based recurrences. If no schedules are provided, the downtime will begin immediately and never end.
    pub fn new(recurrences: Vec<crate::models::DowntimeScheduleRecurrenceResponse>, start: String) -> DowntimeScheduleResponse {
        DowntimeScheduleResponse {
            current_downtime: None,
            recurrences,
            timezone: None,
            end: None,
            start,
        }
    }
}


