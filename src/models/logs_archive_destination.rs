/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// LogsArchiveDestination : An archive's destination.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LogsArchiveDestination {
    /// The container where the archive will be stored.
    #[serde(rename = "container")]
    pub container: String,
    #[serde(rename = "integration")]
    pub integration: Box<crate::models::LogsArchiveIntegrationS3>,
    /// The archive path.
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The region where the archive will be stored.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The associated storage account.
    #[serde(rename = "storage_account")]
    pub storage_account: String,
    #[serde(rename = "type")]
    pub r#type: crate::models::LogsArchiveDestinationS3Type,
    /// The bucket where the archive will be stored.
    #[serde(rename = "bucket")]
    pub bucket: String,
}

impl LogsArchiveDestination {
    /// An archive's destination.
    pub fn new(container: String, integration: crate::models::LogsArchiveIntegrationS3, storage_account: String, r#type: crate::models::LogsArchiveDestinationS3Type, bucket: String) -> LogsArchiveDestination {
        LogsArchiveDestination {
            container,
            integration: Box::new(integration),
            path: None,
            region: None,
            storage_account,
            r#type,
            bucket,
        }
    }
}


