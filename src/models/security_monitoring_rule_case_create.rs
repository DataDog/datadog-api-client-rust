/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SecurityMonitoringRuleCaseCreate : Case when signal is generated.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SecurityMonitoringRuleCaseCreate {
    /// A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated based on the event counts in the previously defined queries.
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// Name of the case.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Notification targets for each rule case.
    #[serde(rename = "notifications", skip_serializing_if = "Option::is_none")]
    pub notifications: Option<Vec<String>>,
    #[serde(rename = "status")]
    pub status: crate::models::SecurityMonitoringRuleSeverity,
}

impl SecurityMonitoringRuleCaseCreate {
    /// Case when signal is generated.
    pub fn new(status: crate::models::SecurityMonitoringRuleSeverity) -> SecurityMonitoringRuleCaseCreate {
        SecurityMonitoringRuleCaseCreate {
            condition: None,
            name: None,
            notifications: None,
            status,
        }
    }
}


