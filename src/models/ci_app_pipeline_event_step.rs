/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// CiAppPipelineEventStep : Details of a CI step.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CiAppPipelineEventStep {
    /// Time when the step run finished. The time format must be RFC3339.
    #[serde(rename = "end")]
    pub end: String,
    #[serde(rename = "error", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error: Option<Option<Box<crate::models::CiAppCiError>>>,
    #[serde(rename = "git", deserialize_with = "Option::deserialize")]
    pub git: Option<Box<crate::models::CiAppGitInfo>>,
    /// UUID for the step. It has to be unique within each pipeline execution.
    #[serde(rename = "id")]
    pub id: String,
    /// The parent job UUID (if applicable).
    #[serde(rename = "job_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<Option<String>>,
    /// The parent job name (if applicable).
    #[serde(rename = "job_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub job_name: Option<Option<String>>,
    #[serde(rename = "level")]
    pub level: crate::models::CiAppPipelineEventStepLevel,
    /// A list of user-defined metrics. The metrics must follow the `key:value` pattern and the value must be numeric.
    #[serde(rename = "metrics", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Option<Vec<String>>>,
    /// The name for the step.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "node", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub node: Option<Option<Box<crate::models::CiAppHostInfo>>>,
    /// A map of key-value parameters or environment variables that were defined for the pipeline.
    #[serde(rename = "parameters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Option<::std::collections::HashMap<String, String>>>,
    /// The parent pipeline name.
    #[serde(rename = "pipeline_name")]
    pub pipeline_name: String,
    /// The parent pipeline UUID.
    #[serde(rename = "pipeline_unique_id")]
    pub pipeline_unique_id: String,
    /// The parent stage UUID (if applicable).
    #[serde(rename = "stage_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stage_id: Option<Option<String>>,
    /// The parent stage name (if applicable).
    #[serde(rename = "stage_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stage_name: Option<Option<String>>,
    /// Time when the step run started. The time format must be RFC3339.
    #[serde(rename = "start")]
    pub start: String,
    #[serde(rename = "status")]
    pub status: crate::models::CiAppPipelineEventStepStatus,
    /// A list of user-defined tags. The tags must follow the `key:value` pattern.
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    /// The URL to look at the step in the CI provider UI.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
}

impl CiAppPipelineEventStep {
    /// Details of a CI step.
    pub fn new(end: String, git: Option<crate::models::CiAppGitInfo>, id: String, level: crate::models::CiAppPipelineEventStepLevel, name: String, pipeline_name: String, pipeline_unique_id: String, start: String, status: crate::models::CiAppPipelineEventStepStatus) -> CiAppPipelineEventStep {
        CiAppPipelineEventStep {
            end,
            error: None,
            git: if let Some(x) = git {Some(Box::new(x))} else {None},
            id,
            job_id: None,
            job_name: None,
            level,
            metrics: None,
            name,
            node: None,
            parameters: None,
            pipeline_name,
            pipeline_unique_id,
            stage_id: None,
            stage_name: None,
            start,
            status,
            tags: None,
            url: None,
        }
    }
}


