/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// RumCompute : A compute rule to compute metrics or timeseries.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RumCompute {
    #[serde(rename = "aggregation")]
    pub aggregation: crate::models::RumAggregationFunction,
    /// The time buckets' size (only used for type=timeseries) Defaults to a resolution of 150 points.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    /// The metric to use.
    #[serde(rename = "metric", skip_serializing_if = "Option::is_none")]
    pub metric: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<crate::models::RumComputeType>,
}

impl RumCompute {
    /// A compute rule to compute metrics or timeseries.
    pub fn new(aggregation: crate::models::RumAggregationFunction) -> RumCompute {
        RumCompute {
            aggregation,
            interval: None,
            metric: None,
            r#type: None,
        }
    }
}


