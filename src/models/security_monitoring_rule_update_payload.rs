/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SecurityMonitoringRuleUpdatePayload : Update an existing rule.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SecurityMonitoringRuleUpdatePayload {
    /// Cases for generating signals.
    #[serde(rename = "cases", skip_serializing_if = "Option::is_none")]
    pub cases: Option<Vec<crate::models::SecurityMonitoringRuleCase>>,
    #[serde(rename = "complianceSignalOptions", skip_serializing_if = "Option::is_none")]
    pub compliance_signal_options: Option<Box<crate::models::CloudConfigurationRuleComplianceSignalOptions>>,
    /// Additional queries to filter matched events before they are processed.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<crate::models::SecurityMonitoringFilter>>,
    /// Whether the notifications include the triggering group-by values in their title.
    #[serde(rename = "hasExtendedTitle", skip_serializing_if = "Option::is_none")]
    pub has_extended_title: Option<bool>,
    /// Whether the rule is enabled.
    #[serde(rename = "isEnabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    /// Message for generated signals.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Name of the rule.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<Box<crate::models::SecurityMonitoringRuleOptions>>,
    /// Queries for selecting logs which are part of the rule.
    #[serde(rename = "queries", skip_serializing_if = "Option::is_none")]
    pub queries: Option<Vec<crate::models::SecurityMonitoringRuleQuery>>,
    /// Tags for generated signals.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The version of the rule being updated.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}

impl SecurityMonitoringRuleUpdatePayload {
    /// Update an existing rule.
    pub fn new() -> SecurityMonitoringRuleUpdatePayload {
        SecurityMonitoringRuleUpdatePayload {
            cases: None,
            compliance_signal_options: None,
            filters: None,
            has_extended_title: None,
            is_enabled: None,
            message: None,
            name: None,
            options: None,
            queries: None,
            tags: None,
            version: None,
        }
    }
}


