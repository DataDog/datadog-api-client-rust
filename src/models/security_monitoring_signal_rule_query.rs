/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SecurityMonitoringSignalRuleQuery : Query for matching rule on signals.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SecurityMonitoringSignalRuleQuery {
    #[serde(rename = "aggregation", skip_serializing_if = "Option::is_none")]
    pub aggregation: Option<crate::models::SecurityMonitoringRuleQueryAggregation>,
    /// Fields to group by.
    #[serde(rename = "correlatedByFields", skip_serializing_if = "Option::is_none")]
    pub correlated_by_fields: Option<Vec<String>>,
    /// Index of the rule query used to retrieve the correlated field.
    #[serde(rename = "correlatedQueryIndex", skip_serializing_if = "Option::is_none")]
    pub correlated_query_index: Option<i32>,
    /// Group of target fields to aggregate over.
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<String>>,
    /// Name of the query.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Rule ID to match on signals.
    #[serde(rename = "ruleId")]
    pub rule_id: String,
}

impl SecurityMonitoringSignalRuleQuery {
    /// Query for matching rule on signals.
    pub fn new(rule_id: String) -> SecurityMonitoringSignalRuleQuery {
        SecurityMonitoringSignalRuleQuery {
            aggregation: None,
            correlated_by_fields: None,
            correlated_query_index: None,
            metrics: None,
            name: None,
            rule_id,
        }
    }
}


