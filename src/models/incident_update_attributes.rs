/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// IncidentUpdateAttributes : The incident's attributes for an update request.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IncidentUpdateAttributes {
    /// Timestamp when customers were no longer impacted by the incident.
    #[serde(rename = "customer_impact_end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_impact_end: Option<Option<String>>,
    /// A summary of the impact customers experienced during the incident.
    #[serde(rename = "customer_impact_scope", skip_serializing_if = "Option::is_none")]
    pub customer_impact_scope: Option<String>,
    /// Timestamp when customers began being impacted by the incident.
    #[serde(rename = "customer_impact_start", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_impact_start: Option<Option<String>>,
    /// A flag indicating whether the incident caused customer impact.
    #[serde(rename = "customer_impacted", skip_serializing_if = "Option::is_none")]
    pub customer_impacted: Option<bool>,
    /// Timestamp when the incident was detected.
    #[serde(rename = "detected", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub detected: Option<Option<String>>,
    /// A condensed view of the user-defined fields for which to update selections.
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<::std::collections::HashMap<String, crate::models::IncidentFieldAttributes>>,
    /// Notification handles that will be notified of the incident during update.
    #[serde(rename = "notification_handles", skip_serializing_if = "Option::is_none")]
    pub notification_handles: Option<Vec<crate::models::IncidentNotificationHandle>>,
    /// The title of the incident, which summarizes what happened.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

impl IncidentUpdateAttributes {
    /// The incident's attributes for an update request.
    pub fn new() -> IncidentUpdateAttributes {
        IncidentUpdateAttributes {
            customer_impact_end: None,
            customer_impact_scope: None,
            customer_impact_start: None,
            customer_impacted: None,
            detected: None,
            fields: None,
            notification_handles: None,
            title: None,
        }
    }
}


