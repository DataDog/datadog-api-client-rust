/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// SecurityMonitoringRuleOptions : Options on rules.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SecurityMonitoringRuleOptions {
    #[serde(rename = "complianceRuleOptions", skip_serializing_if = "Option::is_none")]
    pub compliance_rule_options: Option<Box<crate::models::CloudConfigurationComplianceRuleOptions>>,
    /// If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise. The severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`. The decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.
    #[serde(rename = "decreaseCriticalityBasedOnEnv", skip_serializing_if = "Option::is_none")]
    pub decrease_criticality_based_on_env: Option<bool>,
    #[serde(rename = "detectionMethod", skip_serializing_if = "Option::is_none")]
    pub detection_method: Option<crate::models::SecurityMonitoringRuleDetectionMethod>,
    #[serde(rename = "evaluationWindow", skip_serializing_if = "Option::is_none")]
    pub evaluation_window: Option<crate::models::SecurityMonitoringRuleEvaluationWindow>,
    #[serde(rename = "hardcodedEvaluatorType", skip_serializing_if = "Option::is_none")]
    pub hardcoded_evaluator_type: Option<crate::models::SecurityMonitoringRuleHardcodedEvaluatorType>,
    #[serde(rename = "impossibleTravelOptions", skip_serializing_if = "Option::is_none")]
    pub impossible_travel_options: Option<Box<crate::models::SecurityMonitoringRuleImpossibleTravelOptions>>,
    #[serde(rename = "keepAlive", skip_serializing_if = "Option::is_none")]
    pub keep_alive: Option<crate::models::SecurityMonitoringRuleKeepAlive>,
    #[serde(rename = "maxSignalDuration", skip_serializing_if = "Option::is_none")]
    pub max_signal_duration: Option<crate::models::SecurityMonitoringRuleMaxSignalDuration>,
    #[serde(rename = "newValueOptions", skip_serializing_if = "Option::is_none")]
    pub new_value_options: Option<Box<crate::models::SecurityMonitoringRuleNewValueOptions>>,
}

impl SecurityMonitoringRuleOptions {
    /// Options on rules.
    pub fn new() -> SecurityMonitoringRuleOptions {
        SecurityMonitoringRuleOptions {
            compliance_rule_options: None,
            decrease_criticality_based_on_env: None,
            detection_method: None,
            evaluation_window: None,
            hardcoded_evaluator_type: None,
            impossible_travel_options: None,
            keep_alive: None,
            max_signal_duration: None,
            new_value_options: None,
        }
    }
}


