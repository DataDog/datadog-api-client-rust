/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// LogsGroupBy : A group by rule



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LogsGroupBy {
    /// The name of the facet to use (required)
    #[serde(rename = "facet")]
    pub facet: String,
    #[serde(rename = "histogram", skip_serializing_if = "Option::is_none")]
    pub histogram: Option<Box<crate::models::LogsGroupByHistogram>>,
    /// The maximum buckets to return for this group by
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    #[serde(rename = "missing", skip_serializing_if = "Option::is_none")]
    pub missing: Option<Box<crate::models::LogsGroupByMissing>>,
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Box<crate::models::LogsAggregateSort>>,
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<Box<crate::models::LogsGroupByTotal>>,
}

impl LogsGroupBy {
    /// A group by rule
    pub fn new(facet: String) -> LogsGroupBy {
        LogsGroupBy {
            facet,
            histogram: None,
            limit: None,
            missing: None,
            sort: None,
            total: None,
        }
    }
}


