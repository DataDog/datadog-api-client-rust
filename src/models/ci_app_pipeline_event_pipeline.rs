/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// CiAppPipelineEventPipeline : Details of the top level pipeline, build, or workflow of your CI.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CiAppPipelineEventPipeline {
    /// Time when the pipeline run finished. It cannot be older than 18 hours in the past from the current time. The time format must be RFC3339.
    #[serde(rename = "end")]
    pub end: String,
    #[serde(rename = "error", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error: Option<Option<Box<crate::models::CiAppCiError>>>,
    #[serde(rename = "git", deserialize_with = "Option::deserialize")]
    pub git: Option<Box<crate::models::CiAppGitInfo>>,
    /// Whether or not the pipeline was triggered manually by the user.
    #[serde(rename = "is_manual", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_manual: Option<Option<bool>>,
    /// Whether or not the pipeline was resumed after being blocked.
    #[serde(rename = "is_resumed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_resumed: Option<Option<bool>>,
    #[serde(rename = "level")]
    pub level: crate::models::CiAppPipelineEventPipelineLevel,
    /// A list of user-defined metrics. The metrics must follow the `key:value` pattern and the value must be numeric.
    #[serde(rename = "metrics", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Option<Vec<String>>>,
    /// Name of the pipeline. All pipeline runs for the builds should have the same name.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "node", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub node: Option<Option<Box<crate::models::CiAppHostInfo>>>,
    /// A map of key-value parameters or environment variables that were defined for the pipeline.
    #[serde(rename = "parameters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Option<::std::collections::HashMap<String, String>>>,
    #[serde(rename = "parent_pipeline", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_pipeline: Option<Option<Box<crate::models::CiAppPipelineEventParentPipeline>>>,
    /// Whether or not the pipeline was a partial retry of a previous attempt. A partial retry is one which only runs a subset of the original jobs.
    #[serde(rename = "partial_retry")]
    pub partial_retry: bool,
    /// Any ID used in the provider to identify the pipeline run even if it is not unique across retries. If the `pipeline_id` is unique, then both `unique_id` and `pipeline_id` can be set to the same value.
    #[serde(rename = "pipeline_id", skip_serializing_if = "Option::is_none")]
    pub pipeline_id: Option<String>,
    #[serde(rename = "previous_attempt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub previous_attempt: Option<Option<Box<crate::models::CiAppPipelineEventPreviousPipeline>>>,
    /// The queue time in milliseconds, if applicable.
    #[serde(rename = "queue_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<Option<i64>>,
    /// Time when the pipeline run started (it should not include any queue time). The time format must be RFC3339.
    #[serde(rename = "start")]
    pub start: String,
    #[serde(rename = "status")]
    pub status: crate::models::CiAppPipelineEventPipelineStatus,
    /// A list of user-defined tags. The tags must follow the `key:value` pattern.
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    /// UUID of the pipeline run. The ID has to be unique across retries and pipelines, including partial retries.
    #[serde(rename = "unique_id")]
    pub unique_id: String,
    /// The URL to look at the pipeline in the CI provider UI.
    #[serde(rename = "url")]
    pub url: String,
}

impl CiAppPipelineEventPipeline {
    /// Details of the top level pipeline, build, or workflow of your CI.
    pub fn new(end: String, git: Option<crate::models::CiAppGitInfo>, level: crate::models::CiAppPipelineEventPipelineLevel, name: String, partial_retry: bool, start: String, status: crate::models::CiAppPipelineEventPipelineStatus, unique_id: String, url: String) -> CiAppPipelineEventPipeline {
        CiAppPipelineEventPipeline {
            end,
            error: None,
            git: if let Some(x) = git {Some(Box::new(x))} else {None},
            is_manual: None,
            is_resumed: None,
            level,
            metrics: None,
            name,
            node: None,
            parameters: None,
            parent_pipeline: None,
            partial_retry,
            pipeline_id: None,
            previous_attempt: None,
            queue_time: None,
            start,
            status,
            tags: None,
            unique_id,
            url,
        }
    }
}


