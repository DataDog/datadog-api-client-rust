/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// CiAppGitInfo : If pipelines are triggered due to actions to a Git repository, then all payloads must contain this. Note that either `tag` or `branch` has to be provided, but not both.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CiAppGitInfo {
    /// The commit author email.
    #[serde(rename = "author_email")]
    pub author_email: String,
    /// The commit author name.
    #[serde(rename = "author_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_name: Option<Option<String>>,
    /// The commit author timestamp in RFC3339 format.
    #[serde(rename = "author_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_time: Option<Option<String>>,
    /// The branch name (if a tag use the tag parameter).
    #[serde(rename = "branch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub branch: Option<Option<String>>,
    /// The commit timestamp in RFC3339 format.
    #[serde(rename = "commit_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub commit_time: Option<Option<String>>,
    /// The committer email.
    #[serde(rename = "committer_email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub committer_email: Option<Option<String>>,
    /// The committer name.
    #[serde(rename = "committer_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub committer_name: Option<Option<String>>,
    /// The Git repository's default branch.
    #[serde(rename = "default_branch", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_branch: Option<Option<String>>,
    /// The commit message.
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<String>>,
    /// The URL of the repository.
    #[serde(rename = "repository_url")]
    pub repository_url: String,
    /// The git commit SHA.
    #[serde(rename = "sha")]
    pub sha: String,
    /// The tag name (if a branch use the branch parameter).
    #[serde(rename = "tag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tag: Option<Option<String>>,
}

impl CiAppGitInfo {
    /// If pipelines are triggered due to actions to a Git repository, then all payloads must contain this. Note that either `tag` or `branch` has to be provided, but not both.
    pub fn new(author_email: String, repository_url: String, sha: String) -> CiAppGitInfo {
        CiAppGitInfo {
            author_email,
            author_name: None,
            author_time: None,
            branch: None,
            commit_time: None,
            committer_email: None,
            committer_name: None,
            default_branch: None,
            message: None,
            repository_url,
            sha,
            tag: None,
        }
    }
}


