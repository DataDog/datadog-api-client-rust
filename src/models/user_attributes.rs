/*
 * Datadog API V2 Collection
 *
 * Collection of all Datadog Public endpoints.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@datadoghq.com
 * Generated by: https://openapi-generator.tech
 */

/// UserAttributes : Attributes of user object returned by the API.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserAttributes {
    /// Creation time of the user.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Whether the user is disabled.
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Email of the user.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Handle of the user.
    #[serde(rename = "handle", skip_serializing_if = "Option::is_none")]
    pub handle: Option<String>,
    /// URL of the user's icon.
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// Time that the user was last modified.
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// Name of the user.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Whether the user is a service account.
    #[serde(rename = "service_account", skip_serializing_if = "Option::is_none")]
    pub service_account: Option<bool>,
    /// Status of the user.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Title of the user.
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    /// Whether the user is verified.
    #[serde(rename = "verified", skip_serializing_if = "Option::is_none")]
    pub verified: Option<bool>,
}

impl UserAttributes {
    /// Attributes of user object returned by the API.
    pub fn new() -> UserAttributes {
        UserAttributes {
            created_at: None,
            disabled: None,
            email: None,
            handle: None,
            icon: None,
            modified_at: None,
            name: None,
            service_account: None,
            status: None,
            title: None,
            verified: None,
        }
    }
}


