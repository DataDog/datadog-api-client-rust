{% include "partial_header.j2" %}

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};
{% for path, method, operation in operations|sort(attribute="2.operationId", case_sensitive=True) %}
{%- set httpMethod = method.upper() %}
{%- set returnType = operation|return_type %}
{%- set formParameter = operation|form_parameter %}

{%- for name, parameter in operation|parameters %}
{%- if loop.first %}
// {{ operation.operationId }}Params is a struct for passing parameters to the method [`{{operation.operationId}}`]
#[derive(Clone, Debug)]
pub struct {{operation.operationId}}Params {
{%- endif %}
    {%- if parameter.description is defined %}
    /* {{parameter.description}} */
    {%- endif %}
    pub {{name|variable_name}}: {{ get_type_for_parameter(parameter) }},
{%- if loop.last %}
}
{% endif %}
{%- endfor %}
{%- endfor %}

{% for path, method, operation in operations|sort(attribute="2.operationId", case_sensitive=True) %}
{%- set httpMethod = method.upper() %}
{%- set returnType = operation|return_type %}
{%- set formParameter = operation|form_parameter %}

/// {{ operation.operationId }}Error is a struct for typed errors of method [`{{operation.operationId}}`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{operation.operationId}}Error {
	{%- for responseType, (response, responseCodes) in operation|responses_by_types %}
    {%- for responseCode in responseCodes %}
    Status{{responseCode|int}}({{responseType}}),
    {%- endfor %}
    {%- endfor %}
    UnknownValue(serde_json::Value),
}
{%- endfor %}
