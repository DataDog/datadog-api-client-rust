#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct {{ name }} {
{%- for attr, schema in model.get("properties", {}).items() %}
{%- set propertyName = attr|variable_name %}
{%- set dataType = get_type(schema, alternative_name=name + propertyName, render_nullable=True) %}
{%- set required = true if schema.required else false %}
{%- set isNullable = schema.get("nullable", False)%}
    /* {{ schema.description }} */
    #[serde(rename = "{{ attr }}"{% if not required %}{% if isNullable %}, default, with = "::serde_with::rust::double_option"{% endif %}{% endif %}{% if not required %}, skip_serializing_if = "Option::is_none"{% endif %}{% if not required %}{% if isNullable %}, deserialize_with = "Option::deserialize"{% endif %}{% endif %})]
    pub {{propertyName}}: {{dataType}},
{%- endfor %}
}
{#
impl {{ name }} {
    /// {{ model.description }}
    pub fn new({{#requiredVars}}{{{name}}}: {% if isNullable %}Option<{% endif %}{{#isEnum}}{{#isArray}}Vec<{{/isArray}}{{{enumName}}}{{#isArray}}>{{/isArray}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{% if isNullable %}>{% endif %}{{^-last}}, {{/-last}}{{/requiredVars}}) -> {{ name }} {
        {{{classname}}} {
            {{#vars}}
            {{{name}}}{% if required %}{{#isArray}}: None{{/isArray}}{{#isMap}}: None{{/isMap}}{{#isContainer}}{% if isNullable %}: None{% endif %}{{/isContainer}}{{^isContainer}}: None{{/isContainer}}{% endif %}{% if required %}{{#isModel}}: {{^isNullable}}Box::new({{{name}}}){% endif %}{% if isNullable %}if let Some(x) = {{{name}}} {Some(Box::new(x))} else {None}{% endif %}{{/isModel}}{% endif %},
            {{/vars}}
        }
    }
}
#}