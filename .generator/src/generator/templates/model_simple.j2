use std::fmt::{self, Formatter};
use serde::{Deserializer, Deserialize, Serialize};
use serde::de::{Error, MapAccess, Visitor};
use serde_with::skip_serializing_none;

{{ model.description | block_comment }}
#[non_exhaustive]
#[skip_serializing_none]
#[derive(Clone, Debug, PartialEq, Serialize)]
pub struct {{ name }} {
{%- for attr, schema in model.get("properties", {}).items() %}
{%- set propertyName = attr|variable_name %}
{%- set required = attr in model.required %}
{%- set nullable = schema.get("nullable", false)%}
{%- set dataType = get_type(schema, alternative_name=name + propertyName, render_nullable=nullable, render_option=not required, render_box=false, version=version) %}
    {%- if schema.description is defined %}
    {{ schema.description | block_comment }}
    {%- endif %}
{%- if schema.deprecated %}
	#[deprecated]
{%- endif %}
{%- if required and nullable %}
	#[serialize_always]
{%- endif %}
    #[serde(rename = "{{ attr }}"{% if not required and nullable%}, default, with = "::serde_with::rust::double_option"{% endif %})]
    pub {{propertyName}}: {{dataType}},
{%- endfor %}
{%- if model.additionalProperties is defined and model.additionalProperties != false %}
{%- set dataType = get_type(model.additionalProperties, alternative_name=None, render_nullable=false, render_option=false, render_box=false, version=version) %}
    #[serde(flatten)]
    pub additional_properties: std::collections::BTreeMap<String, {{ dataType }}>,
{%- endif %}
    #[serde(skip)]
    #[serde(default)]
    _unparsed: bool
}

impl {{ name }} {
    pub fn new({% for attr, schema in model.get("properties", {}).items() if attr in model.required %}{%- set nullable = schema.get("nullable", false)%}{%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=false, render_box=false, version=version) %}{{attr|variable_name}}: {{ dataType }}{%- if not loop.last %}, {% endif %}{% endfor %}) -> {{ name }} {
        {%- if get_deprecated(model) %}
        #[allow(deprecated)]
        {%- endif %}
        {{ name }} {
            {%- for attr, schema in model.get("properties", {}).items() %}
            {%- set required = attr in model.required %}
            {%- set nullable = schema.get("nullable", false)%}
            {%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=not required, render_box=false, version=version) %}
            {%- if attr in model.get("required", []) %}
            {{ attr|variable_name }},
            {%- else %}
            {{ attr|variable_name }}: None,
            {%- endif %}
            {%- endfor %}
            {%- if model.additionalProperties is defined and model.additionalProperties != false %}
            additional_properties: std::collections::BTreeMap::new(),
            {%- endif %}
            _unparsed: false,
        }
    }
    {% for attr, schema in model.get("properties", {}).items() if attr not in model.required %}
    {%- set nullable = schema.get("nullable", false)%}
    {%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=false, render_box=false, version=version) %}
    {%- if get_deprecated(model) %}
    #[allow(deprecated)]
    {%- endif %}
    pub fn {{attr|variable_name}}(&mut self, value: {{dataType}}) -> &mut Self {
        self.{{attr|variable_name}} = Some(value);
        self
    }
    {% endfor %}
}

{% if not model.required %}
impl Default for {{ name }} {
    fn default() -> Self {
        Self::new()
    }
}
{%- endif %}

impl<'de> Deserialize<'de> for {{ name }} {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        struct {{ name }}Visitor;
        impl<'a> Visitor<'a> for {{ name }}Visitor {
            type Value = {{ name }};

            fn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {
                f.write_str("a mapping")
            }

            fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>
            where
                M: MapAccess<'a>,
            {
                {%- for attr, schema in model.get("properties", {}).items() %}
                {%- set required = attr in model.required %}
                {%- set propertyName = attr|variable_name %}
                {%- set nullable = schema.get("nullable", false)%}
                {%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=not required, render_box=false, version=version) %}
                let mut {{ propertyName }}: {% if required %}Option<{% endif %}{{ dataType }}{% if required %}>{% endif %} = None;
                {%- endfor %}

                {%- if model.additionalProperties is defined and model.additionalProperties != false %}
                {%- set dataType = get_type(model.additionalProperties, alternative_name=None, render_nullable=false, render_option=false, render_box=false, version=version) %}
                    let mut additional_properties: std::collections::BTreeMap<String, {{ dataType }}> = std::collections::BTreeMap::new();
                {%- endif %}
                let mut _unparsed = false;

                while let Some((k, v)) = map.next_entry::<String, serde_json::Value>()? {
                    match k.as_str() {
                        {%- for attr, schema in model.get("properties", {}).items() %}
                        {%- set required = attr in model.required %}
                        {%- set propertyName = attr|variable_name %}
                        {%- set nullable = schema.get("nullable", false)%}
                        {%- set dataType = get_type(schema, alternative_name=name + propertyName, render_option=false, version=version) %}
                        "{{ attr }}" => {
                            {{ propertyName }} = Some(serde_json::from_value(v).map_err(M::Error::custom)?);
                            {%- if schema.enum or schema.oneOf %}
                            {%- if not required %}
                            if let Some(ref _{{ propertyName }}) = {{ propertyName }} {
                                match _{{ propertyName }} {
                                    {% if not required and nullable%}Some({% endif %}{{ dataType }}::UnparsedObject(_{{ propertyName }}){% if not required and nullable%}){% endif %} => {
                                        _unparsed = true;
                                    },
                                    _ => {}
                                }
                            }
                            {%- endif %}
                            {%- endif %}
                        },
                        {%- endfor %}
                        &_ => {},
                    }
                }

                {%- for attr, schema in model.get("properties", {}).items() %}
                {%- set required = attr in model.required %}
                {%- set propertyName = attr|variable_name %}
                {%- set nullable = schema.get("nullable", false)%}
                {%- if required %}
                let {{ propertyName }} = {{ propertyName }}.ok_or_else(|| M::Error::missing_field("{{ propertyName }}"))?;
                {%- endif %}
                {%- endfor %}

                let content = {{ name }} {
                    {%- for attr, schema in model.get("properties", {}).items() %}
                    {%- set propertyName = attr|variable_name %}
                    {{ propertyName }},
                    {%- endfor %}
                    {%- if model.additionalProperties is defined and model.additionalProperties != false %}
                    additional_properties,
                    {%- endif %}
                    _unparsed,
                };

                Ok(content)
            }
        }

        deserializer.deserialize_any({{ name }}Visitor)
    }
}
