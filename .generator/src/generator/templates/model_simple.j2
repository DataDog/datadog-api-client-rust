use serde::{Serialize, Deserialize};
use serde_with::skip_serializing_none;

{{ model.description | block_comment }}
#[skip_serializing_none]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct {{ name }} {
{%- for attr, schema in model.get("properties", {}).items() %}
{%- set propertyName = attr|variable_name %}
{%- set required = attr in model.required %}
{%- set nullable = schema.get("nullable", False)%}
{%- set dataType = get_type(schema, alternative_name=name + propertyName, render_nullable=nullable, render_option=not required, render_box=True, version=version) %}
    {%- if schema.description is defined %}
    {{ schema.description | block_comment }}
    {%- endif %}
{%- if schema.deprecated %}
	#[deprecated]
{%- endif %}
    #[serde(rename = "{{ attr }}"{% if not required and nullable%}, default, with = "::serde_with::rust::double_option"{% endif %})]
    pub {{propertyName}}: {{dataType}},
{%- endfor %}
{%- if model.additionalProperties is defined and model.additionalProperties != False %}
{%- set dataType = get_type(model.additionalProperties, alternative_name=None, render_nullable=False, render_option=False, render_box=True, version=version) %}
    #[serde(flatten)]
    pub additional_properties: std::collections::BTreeMap<String, {{ dataType }}>,
{%- endif %}
}

impl {{ name }} {
    pub fn new({% for attr, schema in model.get("properties", {}).items() if attr in model.required %}{%- set nullable = schema.get("nullable", False)%}{%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=False, render_box=True, version=version) %}{{attr|variable_name}}: {{ dataType }}{%- if not loop.last %}, {% endif %}{% endfor %}) -> {{ name }} {
        {%- if get_deprecated(model) %}
        #[allow(deprecated)]
        {%- endif %}
        {{ name }} {
            {%- for attr, schema in model.get("properties", {}).items() %}
            {%- set required = attr in model.required %}
            {%- set nullable = schema.get("nullable", False)%}
            {%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=not required, render_box=True, version=version) %}
            {%- if attr in model.get("required", []) %}
            {{ attr|variable_name }},
            {%- else %}
            {{ attr|variable_name }}: None,
            {%- endif %}
            {%- endfor %}
            {%- if model.additionalProperties is defined and model.additionalProperties != False %}
            additional_properties: std::collections::BTreeMap::new(),
            {%- endif %}
        }
    }
    {% for attr, schema in model.get("properties", {}).items() if attr not in model.required %}
    {%- set nullable = schema.get("nullable", False)%}
    {%- set dataType = get_type(schema, alternative_name=name + attr|variable_name, render_nullable=nullable, render_option=False, render_box=True, version=version) %}
    {%- if get_deprecated(model) %}
    #[allow(deprecated)]
    {%- endif %}
    pub fn with_{{attr|variable_name}}(&mut self, value: {{dataType}}) -> &mut Self {
        self.{{attr|variable_name}} = Some(value);
        self
    }
    {% endfor %}
}

{%- if not model.required %}
impl Default for {{ name }} {
    fn default() -> Self {
        Self::new()
    }
}
{%- endif %}
