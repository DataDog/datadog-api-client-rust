// {{ scenario.name|wordwrap(width=120, wrapstring="\n// ")}}

{%- set variables = given_variables(context) %}
{%- set parameters = format_parameters(context.api_request.kwargs, spec=operation_spec, replace_values=context._replace_values, has_body=context.body, variables=variables, version=version|upper) %}
{%- if context.body %}
{%- set body = format_data_with_schema(context.body.value, context.api_request.schema.spec, name_prefix="", replace_values=context._replace_values, required=True, variables=variables, version=version|upper)%}
{%- endif %}

use datadog_api_client::datadog::configuration::Configuration;
use datadog_api_client::datadog{{ version|upper }}::api::api_{{context["api_instance"]["name"] | snake_case}}::*;
use datadog_api_client::datadog{{ version|upper }}::model::*;
use std::collections::BTreeMap;
use chrono::prelude::*;

#[tokio::main]
async fn main() {
    {%- for name, values in context._given.items() %}
	// {{ name|wordwrap(width=120, wrapstring="\n	// ") }}
	{%- for value, schema in values.items()|sort %}
	{%- if context._replace_values.is_used(value) %}
	{%- if schema.type == 'string' and schema.format != 'uuid'%}
	let {{ value|rust_name }} = std::env::var("{{ value }}").unwrap();
	{%- elif schema.type == 'string' and schema.format == 'uuid' %}
	let {{ value|rust_name }} := std::env::var("{{ value }}").unwrap();
	{%- elif schema.type == 'integer' %}
	let {{ value|rust_name }}: i{{ '64' if schema.format == 'int64' else '32' }} = std::env::var("{{ value }}").unwrap().parse().unwrap();
	{%- elif schema.type == 'boolean' %}
	let {{ value|rust_name }}: bool = std::env::var("{{ value }}").unwrap().parse().unwrap();
	{%- else %}
	{{ 1/0 }}
	{%- endif %}
	{%- endif %}
	{%- endfor %}
    {%- endfor %}
    {%- if context.body %}
	let body = {{ body }};
    {%- endif %}
	{%- if context._enable_operations %}
    let mut configuration = Configuration::new();
	{%- else %}
    let configuration = Configuration::new();
    {%- endif %}
    {%- for operation in context._enable_operations %}
	configuration.set_unstable_operation_enabled("{{ version }}.{{ operation }}", true);
    {%- endfor %}
    let api = {{context["api_instance"]["name"]}}API::with_config(configuration);
    let resp = api.{{ context.api_request.operation_id | snake_case }}({{ parameters }}).await;
    if let Ok(value) = resp {
        println!("{:#?}", value);
    } else {
        println!("{:#?}", resp.unwrap_err());
    }
}

