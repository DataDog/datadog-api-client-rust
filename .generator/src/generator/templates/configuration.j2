{% include "partial_header.j2" %}
use std::env;
use std::collections::HashMap;
use log::warn;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest_middleware::ClientWithMiddleware,
    {%- set authMethods = openapi.security %}
	{%- if authMethods %}
	{%- for authMethod in authMethods %}
	{%- for name in authMethod %}
	{%- set schema = openapi.components.securitySchemes[name] %}
	{%- if schema.type == "apiKey" and schema.in != "cookie" %}
    pub {{name|variable_name}}: Option<String>,
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	{%- endif %}
    unstable_operations: HashMap<String, bool>,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }

    pub fn set_unstable_operation_enabled(&mut self, operation: &str, enabled: bool) -> bool {
        if self.unstable_operations.contains_key(operation) {
            self.unstable_operations.insert(operation.to_string(), enabled);
            return true;
        }

        warn!(
            "Operation {} is not an unstable operation, can't enable/disable",
            operation
        );

        false
    }

    pub fn is_unstable_operation_enabled(&self, operation: &str) -> bool {
        if self.unstable_operations.contains_key(operation) {
            return self.unstable_operations.get(operation).unwrap().clone();
        }

        warn!(
            "Operation {} is not an unstable operation, is always enabled",
            operation
        );

        false
    }

    pub fn is_unstable_operation(&self, operation: &str) -> bool {
        if self.unstable_operations.contains_key(operation) {
            return true;
        }

        false
    }
}

impl Default for Configuration {
    fn default() -> Self {
        let http_client = reqwest_middleware::ClientBuilder::new(reqwest::Client::new());
        let unstable_operations = HashMap::from([
            {%- for version, api in apis.items() %}
            {%- for operations in api.values() %}
            {%- for _, _, operation in operations|sort(attribute="2.operationId") %}
            {%- if "x-unstable" in operation %}
                ("{{ version }}.{{ operation.operationId | snake_case }}".to_owned(), false),
            {%- endif %}
            {%- endfor %}
            {%- endfor %}
            {%- endfor %}
        ]);

        Configuration {
            base_path: "https://api.datadoghq.com".to_owned(),
            user_agent: Some(format!(
                "datadog-api-client-rust/{} (rust {}; os {}; arch {})",
                option_env!("CARGO_PKG_VERSION").unwrap_or("?"),
                option_env!("DD_RUSTC_VERSION").unwrap_or("?"),
                env::consts::OS,
                env::consts::ARCH,
            )),
            client: http_client.build(),
            {%- set authMethods = openapi.security %}
            {%- if authMethods %}
            {%- for authMethod in authMethods %}
            {%- for name in authMethod %}
            {%- set schema = openapi.components.securitySchemes[name] %}
            {%- if schema.type == "apiKey" and schema.in != "cookie" %}
            {{name|variable_name}}: env::var("{{ schema.get("x-env-name") }}").ok(),
            {%- endif %}
            {%- endfor %}
            {%- endfor %}
            {%- endif %}
            unstable_operations,
        }
    }
}
