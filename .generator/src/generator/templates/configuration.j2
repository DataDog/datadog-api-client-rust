{% include "partial_header.j2" %}
use rustc_version::{version, Version};
use std::env;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest_middleware::ClientWithMiddleware,
    {%- set authMethods = openapi.security %}
	{%- if authMethods %}
	{%- for authMethod in authMethods %}
	{%- for name in authMethod %}
	{%- set schema = openapi.components.securitySchemes[name] %}
	{%- if schema.type == "apiKey" and schema.in != "cookie" %}
    pub {{name|variable_name}}: Option<String>,
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	{%- endif %}

}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        let http_client = reqwest_middleware::ClientBuilder::new(reqwest::Client::new());
        Configuration {
            base_path: "https://api.datadoghq.com".to_owned(),
            user_agent: Some(format!(
                "datadog-api-client-rust/{} (rust {}; os {}; arch {})",
                env::var("CARGO_PKG_VERSION").unwrap_or("?".to_owned()),
                version().unwrap_or(Version::new(0, 0, 0)),
                env::consts::OS,
                env::consts::ARCH,
            )),
            client: http_client.build(),
            {%- set authMethods = openapi.security %}
            {%- if authMethods %}
            {%- for authMethod in authMethods %}
            {%- for name in authMethod %}
            {%- set schema = openapi.components.securitySchemes[name] %}
            {%- if schema.type == "apiKey" and schema.in != "cookie" %}
            {{name|variable_name}}: env::var("{{ schema.get("x-env-name") }}").ok(),
            {%- endif %}
            {%- endfor %}
            {%- endfor %}
            {%- endif %}
        }
    }
}
