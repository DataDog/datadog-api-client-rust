{% include "partial_header.j2" %}
use std::env::consts::{ARCH, OS};
use std::env::var;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    {%- set authMethods = openapi.security %}
	{%- if authMethods %}
	{%- for authMethod in authMethods %}
	{%- for name in authMethod %}
	{%- set schema = openapi.components.securitySchemes[name] %}
	{%- if schema.type == "apiKey" and schema.in != "cookie" %}
    pub {{name|variable_name}}: Option<String>,
	{%- endif %}
	{%- endfor %}
	{%- endfor %}
	{%- endif %}

}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        let sdk_version = match var("CARGO_PKG_VERSION") {
            Ok(v) => v,
            Err(_) => "0.0.0".to_owned()
        };
        Configuration {
            base_path: "https://api.datadoghq.com".to_owned(),
            user_agent: Some(format!("datadog-api-client-rust/{} (rust {}; os {}; arch {})", sdk_version, "", OS, ARCH)),
            client: reqwest::Client::new(),
            {%- set authMethods = openapi.security %}
            {%- if authMethods %}
            {%- for authMethod in authMethods %}
            {%- for name in authMethod %}
            {%- set schema = openapi.components.securitySchemes[name] %}
            {%- if schema.type == "apiKey" and schema.in != "cookie" %}
            {{name|variable_name}}: None,
            {%- endif %}
            {%- endfor %}
            {%- endfor %}
            {%- endif %}
        }
    }
}
