use crate::scenarios::fixtures::DatadogWorld;
use futures::executor::block_on;
use futures_util::stream::StreamExt;
use futures_util::pin_mut;
use serde_json::Value;
use std::collections::HashMap;

use datadog_api_client::datadog::*;
{%- for version, apis in all_apis.items() %}
use datadog_api_client::datadog{{ version.upper() }};
{%- endfor %}

#[derive(Debug, Default)]
pub struct ApiInstances {
{%- for version, apis in all_apis.items() %}
{%- for name, operations in apis.items() %}
{%- set fieldName = "api_"+name %}
{%- set structName = name.replace(" ", "")+"API" %}
    pub {{version}}_{{fieldName | snake_case}}: Option<datadog{{ version.upper() }}::api::{{fieldName | snake_case}}::{{structName}}>,
{%- endfor %}
{%- endfor %}
}

pub fn initialize_api_instance(world: &mut DatadogWorld, api: String) {
    match api.as_str() {
    {%- for name, versions in get_apis_and_versions(all_apis) %}
    {%- set fieldName = "api_"+name|snake_case %}
    {%- set structName = name.replace(" ", "")+"API" %}
        "{{name.replace(" ", "")}}" => {
        {%- for version in versions %}
            world.api_instances.{{version}}_{{fieldName}} = Some(datadog{{ version.upper() }}::api::{{fieldName}}::{{structName}}::with_config(world.config.clone()));
        {%- endfor %}
        },
    {%- endfor %}
        _ => panic!("{api} API instance not found"),
    }
}

pub fn collect_function_calls(world: &mut DatadogWorld) {
{%- for version, apis in all_apis.items() %}
{%- for _, operations in apis.items() %}
{%- for _, _, operation in operations %}
    world.function_mappings.insert("{{version}}.{{ operation['operationId'] }}".into(), test_{{version}}_{{ operation['operationId'] | snake_case }});
{%- if operation["x-pagination"] %}
    world.function_mappings.insert("{{version}}.{{ operation['operationId'] }}WithPagination".into(), test_{{version}}_{{ operation['operationId'] | snake_case }}_with_pagination);
{%- endif %}
{%- endfor %}
{%- endfor %}
{%- endfor %}
}

{%- for version, apis in all_apis.items() %}
{%- for name, operations in apis.items() %}
{%- set apiName = "api_"+name | snake_case %}
{% for _, _, operation in operations %}
{%- set requiredParams = operation|parameters|selectattr('1.required', 'equalto', true) | list %}
{%- set optionalParams = operation|parameters|rejectattr('1.required', 'equalto', true) | list %}
fn test_{{version}}_{{ operation['operationId'] | snake_case }}(world: &mut DatadogWorld, _parameters: &HashMap<String, Value>) {
    let api = world.api_instances.{{version}}_{{ apiName }}.as_ref().expect("api instance not found");
    {%- for parameter in operation|parameters|list %}
    {%- set schema = parameter[1] | parameter_schema %}
    {%- if parameter[1].required %}
    {%- if schema | is_primitive and schema.get("format") == "binary" -%}
    let {{ parameter[0] | variable_name }} = _parameters.get("{{ parameter[0] }}").unwrap().as_str().unwrap().as_bytes().to_vec();
    {%- else -%}
    let {{ parameter[0] | variable_name }} = serde_json::from_value(_parameters.get("{{ parameter[0] }}").unwrap().clone()).unwrap();
    {%- endif -%}
    {%- else %}
    let {{ parameter[0] | variable_name }} = _parameters.get("{{ parameter[0] }}").and_then(|param| 
        {%- if schema | is_primitive and schema.get("format") == "binary" -%}
        Some(param.as_str().unwrap().as_bytes().to_vec())
        {%- else -%}
        Some(serde_json::from_value(param.clone()).unwrap())
        {%- endif -%}
    );
    {%- endif %}
    {%- endfor %}

    {%- for parameter in optionalParams %}
    {%- if loop.first %}
    let mut params = datadog{{ version.upper() }}::api::{{ apiName }}::{{ operation['operationId'] }}OptionalParams::default();
    {%- endif %}
    params.{{ parameter[0] | variable_name }} = {{ parameter[0] | variable_name }};
    {%- if loop.last %}
    ;
    {%- endif %}
    {%- endfor %}
    let response = match block_on(api.{{ operation['operationId'] | snake_case}}_with_http_info({% for name, parameter in requiredParams %}{{name|variable_name}}{% if loop.last %}{% if operation|has_optional_parameter %}, {% endif %}{% else %}, {% endif %}{% endfor %}{% if operation|has_optional_parameter %}params{% endif %})) {
        Ok(response) => response,
        Err(error) => {
            return match error {
                Error::ResponseError(e) => {
                    world.response.code = e.status.as_u16();
                    if let Some(entity) = e.entity {
                        world.response.object = serde_json::to_value(entity).unwrap();
                    }                    
                },
                _ => panic!("error parsing response: {}", error),
            };
        }
    };
    world.response.object = serde_json::to_value(response.entity).unwrap();
    world.response.code = response.status.as_u16();
}

{%- if operation["x-pagination"] %}
fn test_{{version}}_{{ operation['operationId'] | snake_case }}_with_pagination(world: &mut DatadogWorld, _parameters: &HashMap<String, Value>) {
    let api = world.api_instances.{{version}}_{{ apiName }}.as_ref().expect("api instance not found");
    {%- for parameter in operation|parameters|list %}
    {%- set schema = parameter[1] | parameter_schema %}
    {%- if parameter[1].required %}
    {%- if schema | is_primitive and schema.get("format") == "binary" -%}
    let {{ parameter[0] | variable_name }} = _parameters.get("{{ parameter[0] }}").unwrap().as_str().unwrap().as_bytes().to_vec();
    {%- else -%}
    let {{ parameter[0] | variable_name }} = serde_json::from_value(_parameters.get("{{ parameter[0] }}").unwrap().clone()).unwrap();
    {%- endif -%}
    {%- else %}
    let {{ parameter[0] | variable_name }} = _parameters.get("{{ parameter[0] }}").and_then(|param| 
        {%- if schema | is_primitive and schema.get("format") == "binary" -%}
        Some(param.as_str().unwrap().as_bytes().to_vec())
        {%- else -%}
        Some(serde_json::from_value(param.clone()).unwrap())
        {%- endif -%}
    );
    {%- endif %}
    {%- endfor %}

    {%- for parameter in optionalParams %}
    {%- if loop.first %}
    let mut params = datadog{{ version.upper() }}::api::{{ apiName }}::{{ operation['operationId'] }}OptionalParams::default();
    {%- endif %}
    params.{{ parameter[0] | variable_name }} = {{ parameter[0] | variable_name }};
    {%- if loop.last %}
    ;
    {%- endif %}
    {%- endfor %}
    let response = api.{{ operation['operationId'] | snake_case}}_with_pagination({% for name, parameter in requiredParams %}{{name|variable_name}}{% if loop.last %}{% if operation|has_optional_parameter %}, {% endif %}{% else %}, {% endif %}{% endfor %}{% if operation|has_optional_parameter %}params{% endif %});
    let mut result = Vec::new();

    block_on(async {
        pin_mut!(response);

        while let Some(resp) = response.next().await {
            match resp {
                Ok(response) => {
                    result.push(response);
                }
                Err(error) => {
                    return match error {
                        Error::ResponseError(e) => {
                            if let Some(entity) = e.entity {
                                world.response.object = serde_json::to_value(entity).unwrap();
                            }
                        }
                        _ => panic!("error parsing response: {}", error),
                    };
                }
            }
        }
    });
    world.response.object = serde_json::to_value(result).unwrap();
    world.response.code = 200;
}
{%- endif%}
{% endfor %}
{%- endfor %}
{%- endfor %}
