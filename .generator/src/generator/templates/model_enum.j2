{%- if model["type"] == "integer" %}
use serde::{Serialize, Deserialize, Serializer, Deserializer};
{%- else %}
use serde::{Serialize, Deserialize};
{%- endif %}
{% if description is defined %}
{{ description | block_comment }}
{%- endif %}

#[non_exhaustive]
{%- if model["type"] == "integer" %}
#[derive(Clone, Debug, Eq, PartialEq)]
#[repr({{model | simple_type(false, false)}})]
{%- else %}
#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]
{%- endif %}
pub enum {{name}} {
{%- for index, value in enumerate(model.enum) %}
{%- if model["type"] == "integer" %}
	{{ model["x-enum-varnames"][index] or value.upper() }},
{%- else %}
    #[serde(rename = "{{value}}")]
	{{ model["x-enum-varnames"][index] or value.upper() }},
{%- endif %}
{%- endfor %}
}

impl ToString for {{name}} {
    fn to_string(&self) -> String {
        match self {
{%- for index, value in enumerate(model.enum) %}
            Self::{{model["x-enum-varnames"][index] or value.upper()}} => String::from("{{value}}"),
{%- endfor %}
        }
    }
}

{%- if model["type"] == "integer" %}
impl Serialize for {{name}} {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        serializer.serialize_i32(match self {
            {%- for index, value in enumerate(model.enum) %}
            {{ name }}::{{ model["x-enum-varnames"][index] or value.upper() }} => {{ value }},
            {%- endfor %}
        })
    }
}

impl<'de> Deserialize<'de> for {{name}} {
    fn deserialize<D>(deserializer: D) -> Result<{{name}}, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s: i32  = i32::deserialize(deserializer)?;
        Ok(match s {
            {%- for index, value in enumerate(model.enum) %}
            {{ value }} => {{ name }}::{{ model["x-enum-varnames"][index] or value.upper() }},
            {%- endfor %}
            _ => return Err(serde::de::Error::custom(format!("Invalid value for {{ name }}: {}", s))),
        })
    }
}
{%- endif %}
