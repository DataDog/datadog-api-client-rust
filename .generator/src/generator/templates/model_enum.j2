{%- set dataType = model|simple_type(render_option=False) %}
use serde::{Serialize, Deserialize, Serializer, Deserializer};
{% if description is defined %}
{{ description | block_comment }}
{%- endif %}

#[non_exhaustive]
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum {{ name }} {
{%- for index, value in enumerate(model.enum) %}
	{{ model["x-enum-varnames"][index] or value.upper() }},
{%- endfor %}
    UnparsedObject(crate::datadog::UnparsedObejct),
}

{%- if not model["type"] == "integer" %}

impl ToString for {{ name }} {
    fn to_string(&self) -> String {
        match self {
{%- for index, value in enumerate(model.enum) %}
            Self::{{model["x-enum-varnames"][index] or value.upper()}} => String::from("{{value}}"),
{%- endfor %}
            Self::UnparsedObject(v) => v.value.to_string(),
        }
    }
}
{%- endif %}

impl Serialize for {{ name }} {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match self {
            Self::UnparsedObject(v) => v.serialize(serializer),
        {%- if model["type"] == "string"%}
            _ => serializer.serialize_str(self.to_string().as_str()),
        {%- else %}
            {%- for index, value in enumerate(model.enum) %}
            Self::{{ model["x-enum-varnames"][index] or value.upper() }} => serializer.serialize_{{ dataType }}({{ value }}),
            {%- endfor %}
        {%- endif %}
        }
    }
}

impl<'de> Deserialize<'de> for {{ name }} {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s: {{ dataType }} = {{ dataType }}::deserialize(deserializer)?;
        Ok(match s{%- if model["type"] == "string" %}.as_str(){% endif %} {
            {%- for index, value in enumerate(model.enum) %}
            {%- if model["type"] == "string" %}"{%- endif %}{{ value }}{%- if model["type"] == "string" %}"{%- endif %} => Self::{{ model["x-enum-varnames"][index] or value.upper() }},
            {%- endfor %}
            _ => Self::UnparsedObject(crate::datadog::UnparsedObejct { value: serde_json::Value::{%- if model["type"] == "string" %}String{%- else %}Number{%- endif %}(s.into()) }),
        })
    }
}
